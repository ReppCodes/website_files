I"Gb<hr />
<h2 id="memory-management">Memory Management</h2>

<h3 id="goals">Goals</h3>
<ul>
  <li>Manage physical memory on behalf of one or more executing processes</li>
  <li>In order to not impose unnecessary limits on these processes we decouple virtual and physical memory
    <ul>
      <li>Basically everything uses virtual addresses, which are then translated to physical addresses</li>
      <li>To be able to do this successfully the OS must be able to:
        <ul>
          <li>Allocate physical memory
            <ul>
              <li>Needs data structures and algorithms to track usage, replacement, and free memory</li>
              <li>Needs mechanisms to replace contents of physical memory with contents on temporary storage, such as a disk, and swap out unused memory contents for it</li>
            </ul>
          </li>
          <li>Arbitrate how physical memory is accessed
            <ul>
              <li>OS must be able to interpret and verify a process’ memory access</li>
              <li>This requires being able to quickly translate a virtual address into a physical address
                <ul>
                  <li>leverage hardware support and clever DS design</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Virtual address space is subdivided into pages
    <ul>
      <li>physical divided into page frames of the same size</li>
      <li>Allocation then is about mapping pages to page frames</li>
      <li>Arbitration is done using page tables</li>
    </ul>
  </li>
  <li>Pages aren’t the only option, segment-based memory management uses segments
    <ul>
      <li>Allocate – segments</li>
      <li>Arbitrate – segment registers</li>
      <li>Paging is more common in most OS’s</li>
    </ul>
  </li>
</ul>

<h3 id="hardware-support">Hardware Support</h3>
<ul>
  <li>in order to make allocation and arbitration efficient, hardware mechanisms help out</li>
  <li>MMU - memory management unit
    <ul>
      <li>transates virtual to physical addresses</li>
      <li>reports faults for things like illegal accesses or inadequate permissions, or page isn’t present in memory (page fault!)</li>
    </ul>
  </li>
  <li>Dedicated Registers for use during address translation
    <ul>
      <li>page-based system: pointers directly to page table</li>
      <li>segment-based system: base address and limit size of segments, number of segments</li>
    </ul>
  </li>
  <li>Cache-Translation Lookaside Buffer
    <ul>
      <li>valid VA-PA translations: TLB</li>
      <li>avoid needing to look up or re-derive translations regularly, cache them for faster access</li>
    </ul>
  </li>
  <li>Translation
    <ul>
      <li>actual PA generation done in hardware.  the OS maintains certain data structures for necessary information for translation, but actual translation is done by hardware.</li>
    </ul>
  </li>
  <li>This means that hardware dictates what memory management systems are supported. Pages vs Segments, which dedicated registers are available, size of TLB all drive memory management approach, and are all determined by hardware and not the OS.
    <ul>
      <li>Some things, like allocation and replacement algorithms, are done by the OS in software.</li>
    </ul>
  </li>
</ul>

<h3 id="page-tables">Page Tables</h3>
<ul>
  <li>For each virtual address, a page table entry exists that determines the actual physical location that corresponds to it
    <ul>
      <li>Works as a “map”</li>
    </ul>
  </li>
  <li>Virtual memory pages and physical memory page frames are the same size
    <ul>
      <li>Because of this size matching we don’t have to keep track of every virtual address in a page.  We only have to track the first virtual address in a page, and then map that to the first physical address in the page frame.  From there, offsets will match correctly.</li>
      <li>This substantially saves space on the page table</li>
      <li>The language to describe this is the Virtual Page Number (VPN) and the offset
        <ul>
          <li>The corresponding physical memory are Physical Frame Number (PFN) and the offset</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Physical memory for full address mapping when paging in is allocated on first touch.
    <ul>
      <li>Unused pages are reclaimed from physical memory</li>
    </ul>
  </li>
  <li>Page tables track additional information in storage bits
    <ul>
      <li>Valid bit indicates whether the page frame is actually in memory</li>
      <li>If hardware finds that a mapping is invalid, it will raise a fault and trap to the operating system
        <ul>
          <li>OS gets to decide:
            <ul>
              <li>if access is permitted</li>
              <li>where is page located</li>
              <li>where should it be brought into DRAM</li>
            </ul>
          </li>
          <li>reestablish the mapping on reaccess</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Page tables are per-process
    <ul>
      <li>on context switch, switch to valid page table</li>
      <li>update relevant registers, e.g. CR3 on x86 that points to base of page table</li>
    </ul>
  </li>
</ul>

<h3 id="page-table-entry">Page Table Entry</h3>
<ul>
  <li>Every entry will have a PFN and a valid bit, at minimum
    <ul>
      <li>valid bit also called present bit</li>
    </ul>
  </li>
  <li>There are several other fields that may be present depending on OS and hardware
    <ul>
      <li>Dirty bit
        <ul>
          <li>gets set whenever a page is written to</li>
          <li>useful for filesystems where files are cached in memory, as it will tell the OS which files have been written to and so need to have changes pushed back out to disk</li>
        </ul>
      </li>
      <li>Accessed (for read or write)</li>
      <li>protection bits =&gt; RWX
        <ul>
          <li>useful for WorX for example</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>X86 Page Table Entry Example
<img src="../assets/content_images/omscs/gios/p3l2_img1.png" alt="" /></li>
  <li>Present</li>
  <li>Dirty</li>
  <li>Accessed</li>
  <li>R/W =&gt; permission bit: 0-&gt;R, 1-&gt;R/W
    <ul>
      <li>0 indicates read-only, 1 indicates read/write allowed</li>
    </ul>
  </li>
  <li>U/S =&gt; permission bit: 0-&gt;usermode, 1-&gt; supervisor mode only</li>
  <li>Others: caching related info (write through, caching disabled, etc)</li>
  <li>Unused: for future use</li>
</ul>

<h3 id="page-fault">Page Fault</h3>
<ul>
  <li>The MMU relies on page table entries to both perform address translation and to establish validity of each access</li>
  <li>If the hardware determines that an acess cannot be performed it causes a page fault
    <ul>
      <li>The CPU will place an error code on the stack of the kernel, and then generate a trap into the kernel</li>
      <li>The kernel will then generate a page fault handler which will determine the action that must be taken based on the error code and the address that caused the fault
        <ul>
          <li>bring page from disk to memory</li>
          <li>permission protection error – SIGSEGGV (segfault!)</li>
          <li>on x86 the error code information is generated from some of the flags in the page table entry and the faulting address is stored in a register cr2</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="page-table-size">Page Table Size</h3>
<ul>
  <li>To calculate the size of a page table we know that a page table has # of entries equal to number of virtual pages in a virtual address space
    <ul>
      <li>We also know the information it must hold for each entry</li>
      <li>on a 32-bit architecture:
        <ul>
          <li>PTE =&gt; 4 bytes, including PFN + flags</li>
          <li>VPN =&gt; 2^32 / page size</li>
          <li>with a common 4kb page size:
            <ul>
              <li>calculated as: (2^32/2^12)*4b = 4MB – PER PROCESS</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>when converting to 64-bit (just change 32 to 64 in equation) this comes out at 32PB per process.  Obviously unworkable.</li>
      <li>To solve this, remember:
        <ul>
          <li>process doesn’t use the entire address space</li>
          <li>even on 32-bit architecture doesn’t use all of 4MB</li>
          <li>but page table assumes an entry per VPN, regardless of whether corresponding virtual memory is needed or not</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="hierarchical-page-tables">Hierarchical Page Tables</h4>
<ul>
  <li>Solution to the space issue is that page tables aren’t really flat anymore</li>
  <li>Outer page table or Top page table == page table directory
    <ul>
      <li>elements are not pointers to pages, but to internal page tables</li>
    </ul>
  </li>
  <li>Internal page tables
    <ul>
      <li>only for valid virtual memory regions - save some space on not showing unused virtual memory</li>
    </ul>
  </li>
  <li>On malloc a new internal page table may be allocated</li>
  <li>To find the right element in a multilevel structure the virtual address is split
<img src="../assets/content_images/omscs/gios/p3l2_img2.png" alt="" /></li>
  <li>This format uses:
    <ul>
      <li>10 bits for outer page table index (p1)</li>
      <li>10 bits for the internal page table index (P2)</li>
      <li>10 bits for page offset to physical memory (d)</li>
      <li>This allows storage of addresses such that: 2^10 * page size == 1mb</li>
      <li>don’t need an inner table for each 1mb virtual memory gap, also saving size</li>
    </ul>
  </li>
  <li>This style can be extended using additional layers
    <ul>
      <li>page table directory pointer (3rd level)</li>
      <li>page table directory pointer map (4th level)</li>
      <li>This is particularly important on 64bit architectures
        <ul>
          <li>they are much larger and much more sparse</li>
          <li>the ability to exclude gaps saves more in a sparse environment, so very useful here</li>
        </ul>
      </li>
      <li>This has tradeoffs, of course
        <ul>
          <li>pros:
            <ul>
              <li>smaller internal page tables/directories</li>
              <li>granularity of coverage, excluding gaps
                <ul>
                  <li>potential reduced page table size</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>cons:
            <ul>
              <li>more memory accesses required for translation
                <ul>
                  <li>increased translation latency</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="speeding-up-translation-lookaside-buffer-tlb">Speeding up Translation Lookaside Buffer (TLB)</h3>
<ul>
  <li>As covered above, adding levels to the page table structure will reduce size, but add latency to memory accesses</li>
  <li>Single-level page table
    <ul>
      <li>1x access to page table entry</li>
      <li>1x access to memory</li>
    </ul>
  </li>
  <li>Four-level page table
    <ul>
      <li>4x access to page table entries</li>
      <li>1x access to memory</li>
      <li>obviously slower</li>
    </ul>
  </li>
  <li>Page Table Cache is the standard technique to deal with this latency
    <ul>
      <li>In most architectures, there is a haradware cache for storing address translaations.  This is the TLB.
        <ul>
          <li>If there is a TLB hit, we can skip going all the way down to memory</li>
          <li>On a TLB miss, we perform address translation steps as normal</li>
          <li>The TLB has validity and protection bits, similar to PTEs, for the same reasons</li>
          <li>Even a small number of cached addresses result in a very high TLB hit rate.  This is because there is usually a high temporal and spatial locality for memory references</li>
        </ul>
      </li>
      <li>On x86 Core i7:
        <ul>
          <li>per core:
            <ul>
              <li>64-entry data TLB</li>
              <li>128-entry instruction TLB</li>
            </ul>
          </li>
          <li>512-entry shared second-level TLB</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="inverted-page-tables">Inverted Page Tables</h3>
<ul>
  <li>Different architecture entirely from multi-level page tables above!
<img src="../assets/content_images/omscs/gios/p3l2_img3.png" alt="" /></li>
  <li>Physical memory is much smaller than virtual memory.  Inverted page tables try to address that</li>
  <li>To find the translation, the page table is searched based on the process ID and the first part of the physical address</li>
  <li>The problem with these is that it requires linear search of page table to find matching pid/p
    <ul>
      <li>because memory can be assigned arbitrarily, the page table is not ordered in a useful way</li>
      <li>In practice the TLB catches a lot of this, minimizing the impact</li>
      <li>However, misses are still painful enough that they must be addressed</li>
      <li>To address this, inverted page tables are supplemented with hashing tables</li>
      <li>A hash is computed on a part of the address, and that is an entry in the hash table
        <ul>
          <li>points to a linked list of possible matches for part of the address</li>
          <li>speeds up process of linear search by narrowing down to a few possible hash matches.  Thus, this speeds up overall address translation
<img src="../assets/content_images/omscs/gios/p3l2_img4.png" alt="" /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="segmentation">Segmentation</h3>
<ul>
  <li>segments == arbitrary granularity, arbitrary size
    <ul>
      <li>should correspond to some logical components of the address space, such as code, heap, data, stack, etc</li>
    </ul>
  </li>
  <li>address consistes of a segment descriptor and and offset
    <ul>
      <li>descriptor is used with a descriptor table to determine info regarding physical address.  combined with offset to get to the actual physical address
<img src="../assets/content_images/omscs/gios/p3l2_img5.png" alt="" /></li>
    </ul>
  </li>
  <li>In its pure form, a segment represents contigous physical memory
    <ul>
      <li>in this case segment would be defined by its base address and limit registers</li>
    </ul>
  </li>
  <li>In practice, often used in combination with paging
<img src="../assets/content_images/omscs/gios/p3l2_img6.png" alt="" /></li>
  <li>The type of address translation that’s possible on a given platform is determined by the hardware
    <ul>
      <li>IA x86_32 =&gt; segmentation + paging
        <ul>
          <li>linux: up to 8k segments available per process, plus another 8k global segments</li>
        </ul>
      </li>
      <li>IA x86_64 =&gt; paging
        <ul>
          <li>segmentation + paging supported for backward compatibility, but default mode is to just use paging</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="page-size-redux">Page Size Redux</h3>
<ul>
  <li>In prior examples, we used 10bit or 12bit offsets.  Offset determines total number of addresses per page and therefore page size</li>
  <li>In practice, systems support different page sizes
    <ul>
      <li>4kb is default in Linux x86 env</li>
      <li>Other common sizes:
        <ul>
          <li>Large Pages == 2mb page size and 21 bits offset
            <ul>
              <li>Reduces page table size 512x compared to 4kb pages</li>
            </ul>
          </li>
          <li>Huge Pages == 1gb page size and 30 bits offset
            <ul>
              <li>Reduces page table size 1024x compared to 4kb pages</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Larger pages pros
    <ul>
      <li>fewer page table entries</li>
      <li>smaller page tables</li>
      <li>more TLB hits</li>
    </ul>
  </li>
  <li>Larger pages cons
    <ul>
      <li>internal fragmentation =&gt; wastes memory</li>
    </ul>
  </li>
</ul>

<h3 id="memory-allocation">Memory Allocation</h3>
<ul>
  <li>Memory allocator
    <ul>
      <li>determines VA to PA mapping
        <ul>
          <li>address translation, page tables, etc s,imply determine PA from VA and check validity/permissions</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>kernel-level allocators responsible for:
    <ul>
      <li>allocating memory regions for the kernel,</li>
      <li>static process state (code/stack/data etc)</li>
      <li>keeping track of the free memory in the system</li>
    </ul>
  </li>
  <li>user-level allocators responsible for:
    <ul>
      <li>dynamic process state (heap, malloc/free)
        <ul>
          <li>once the kernel allocates memory to a malloc call, kernel is no longer responsilbe for management of that space</li>
          <li>instead it will be managed by whatever user-level allocator is used, e.g. dlmalloc, jemalloc, hoard, tcmalloc</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="memory-allocation-challenges">Memory Allocation Challenges</h4>
<ul>
  <li>Key challenge of naive implementation of memory allocation is fragmentation.  Contiguous stretches of free memory may be substantially smaller than overall free memory depending on circumstances of memory allocations and releases
    <ul>
      <li>Called “external fragmentation”</li>
      <li>One solution is for allocator algorithm to attempt to aggregate free areas.  Hypothetical explanation given in lecture</li>
    </ul>
  </li>
</ul>

<h3 id="allocators-in-the-linux-kernel">Allocators in the Linux Kernel</h3>
<ul>
  <li>Relies on 2 basic allocation mechanisms
    <ul>
      <li>Buddy Allocator
        <ul>
          <li>starts with 2^x area</li>
          <li>on request, subdivide 2^x chunks until it finds smallest 2^x chunk that can satisfy request
            <ul>
              <li>e.g. start with 64.  given a request for an 8 page chunk, subdivide 64 into 32, then one 32 into 16, then one 16 into an 8.</li>
              <li>left afterwards would be a 32, a 16, and two 8s (one of which is not free)</li>
            </ul>
          </li>
          <li>On free, recombine adjacent chunks back into larger size if possible (this is the source of the ‘buddy’ name, as it combines ‘buddy’ chunks)</li>
          <li>note – the reson for one using powers of 2 is that this means the addresses of buddy chunks will differ only by 1 bit.  this makes it easier to perform checks when combining or splitting chunks</li>
          <li>pros
            <ul>
              <li>aggregation works well and fast</li>
            </ul>
          </li>
          <li>cons
            <ul>
              <li>2^x granularity means there will be some internal fragmentation, because there are many data structures that are not close in size to a power of 2.  this is addressed by the slab allocator.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Slab Allocator
        <ul>
          <li>builds custom object caches on top of slabs
            <ul>
              <li>caches for common object types/sizes, on top of contiguously allocated physical memory</li>
            </ul>
          </li>
          <li>when the kernel starts it will pre-create caches for the different object types
            <ul>
              <li>when an allocation comes, it will go straight to cache, and use one of those elements</li>
              <li>if there is a cache miss, the kernel will create a new slab and will allocate additional portion of memory to be managed by slab allocator</li>
            </ul>
          </li>
          <li>pros
            <ul>
              <li>avoids internal fragmentation</li>
              <li>external fragmentation not an issue, as memoy allocation sizes are custom-fit to the objects that will make use of them anyway</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="demand-paging">Demand Paging</h3>
<ul>
  <li>Because virtual memory is much larger than physical memory, allocated pages of virtual memory are not always present in physical memory.
    <ul>
      <li>instead, backing physical page frame saved and restored to/from secondary storage</li>
      <li>this is referred to as demand paging
        <ul>
          <li>pages swapped in/out of memory and a swap partition (e.g. on disk)</li>
          <li>note that after page swapping the new PA will likely be different from the original PA.</li>
          <li>A page can be “pinned”, disabling swapping on it
<img src="../assets/content_images/omscs/gios/p3l2_img7.png" alt="" /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="page-replacement">Page Replacement</h4>
<ul>
  <li>When should pages be swapped out?
    <ul>
      <li>periodically, when the amount of occupied memory exceeds a threshold
        <ul>
          <li>when memory usage is above threshold (high watermark)</li>
          <li>when CPU usage is below threshold (low watermark)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Which pages should e swapped out?
    <ul>
      <li>pages that won’t be used in the future.  the challenge is, of course, how to know which pages those are.
        <ul>
          <li>history-based prediction =&gt; least-recently used (LRU policy)
            <ul>
              <li>access bit on PTE to track if page is referenced</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>pages that don’t need to be written out to disk
        <ul>
          <li>writes to disk are slow, so avoid if possible
            <ul>
              <li>dirty bit on PTE to track if modified</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>avoid non-swappable pages (pinned)</li>
    </ul>
  </li>
  <li>In Linux (and in many other OS’s)
    <ul>
      <li>there are parameters available to configure the page replacement function of the system</li>
      <li>parameters to tune thresholds: target page count</li>
      <li>categorizes pages into different types
        <ul>
          <li>e.g. claimable, swappable</li>
        </ul>
      </li>
      <li>default page swap algorithm is “second chance” varation of LRU
        <ul>
          <li>performs two scans of a set of pages before making swap determinations</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="copy-on-write-cow">Copy on Write (COW)</h3>
<ul>
  <li>Systems rely on memory module hardware (MMU) to perform translation, track access, and enforce protection</li>
  <li>However, it is also useful to build other services and optimizations</li>
  <li>On process creation
    <ul>
      <li>copy entire parent address space</li>
      <li>However, many pages are static, and don’t change
        <ul>
          <li>so why keep multiple copies?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Instead, on creation
    <ul>
      <li>map new VA to original physical page</li>
      <li>write protect original physical page</li>
      <li>if only read
        <ul>
          <li>save memory and time to copy</li>
        </ul>
      </li>
      <li>on write
        <ul>
          <li>page fault and copy</li>
          <li>this allows the OS to pay the copy cost only if necessary</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="failure-management-checkpointing">Failure Management Checkpointing</h3>
<ul>
  <li>Checkpointing == failure &amp; recovery management technique
    <ul>
      <li>periodically save entire process state</li>
      <li>failure may be unavoidable, but can restart from checkpoint, so recovery will be much faster</li>
    </ul>
  </li>
  <li>simple approach
    <ul>
      <li>pause and copy entire process state periodically</li>
      <li>very expensive, and unnecessary</li>
    </ul>
  </li>
  <li>better approach
    <ul>
      <li>take advantage of MMU</li>
      <li>write-protect and copy everything once</li>
      <li>then copy only diffs of dirtied pages for incremental checkpoints
        <ul>
          <li>Recovery process will be more complex: rebuild from multiple diffs, or in background</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The same basic processes used in checkpointing can also be used in other services
    <ul>
      <li>Debugging
        <ul>
          <li>rewind-replay
            <ul>
              <li>rewind == restart from checkpoint</li>
            </ul>
          </li>
          <li>gradually go back to older checkpoints until error is found</li>
        </ul>
      </li>
      <li>Migration
        <ul>
          <li>capture checkpoints, transfer to another machine</li>
          <li>continue on another machine</li>
          <li>useful for disaster recovery or consolidation in data centers</li>
          <li>repeated checkpoints in a fast loop until pause and copy becomes acceptable/unavoidable</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET